#Getting started with Naive Bayes
#Install the package
#install.packages(“e1071”)
#Loading the library
library(e1071)
?naiveBayes #The documentation also contains an example implementation of Servo dataset
#Next load the Servo dataset
data("Servo")
#Save into a data frame and view it
Servo_df=as.data.frame(Servo)
#Creating data from table
repeating_sequence=rep.int(seq_len(nrow(Servo_df)), Servo_df$Freq) #This will repeat each combination equal to the frequency of each combination

#Create the dataset by row repetition created
Servo_dataset=Servo_df[repeating_sequence,]
#We no longer need the frequency, drop the feature
Servo_dataset$Freq=NULL

#Fitting the Naive Bayes model
Naive_Bayes_Model=naiveBayes(Survived ~., data=Servo_dataset)
#What does the model say? Print the model summary
Naive_Bayes_Model

#Prediction on the dataset
NB_Predictions=predict(Naive_Bayes_Model,Servo_dataset)
#Confusion matrix to check accuracy
table(NB_Predictions,Servo_dataset$Survived)

#Getting started with Naive Bayes in mlr
#Install the package
#install.packages(“mlr”)
#Loading the library
library(mlr)

#Create a classification task for learning on Servo Dataset and specify the target feature
task = makeClassifTask(data = Servo_dataset, target = "Survived")

#Initialize the Naive Bayes classifier
selected_model = makeLearner("classif.naiveBayes")

#Train the model
NB_mlr = train(selected_model, task)

#Read the model learned  
NB_mlr$learner.model

#Predict on the dataset without passing the target feature
predictions_mlr = as.data.frame(predict(NB_mlr, newdata = Servo_dataset[,1:3]))

##Confusion matrix to check accuracy
table(predictions_mlr[,1],Servo_dataset$Survived)